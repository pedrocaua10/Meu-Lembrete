{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/card\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/form-field\";\nexport class RegistroComponent {\n  constructor(fb, authService, router) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.registroForm = this.fb.group({\n      nome: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      senha: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n  onSubmit() {\n    if (this.registroForm.valid) {\n      this.authService.registrar(this.registroForm.value).subscribe({\n        next: () => {\n          alert('Registro realizado com sucesso!');\n          this.router.navigate(['/login']);\n        },\n        error: error => {\n          console.error('Erro no registro:', error);\n        }\n      });\n    }\n  }\n  static {\n    this.ɵfac = function RegistroComponent_Factory(t) {\n      return new (t || RegistroComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: RegistroComponent,\n      selectors: [[\"app-registro\"]],\n      decls: 24,\n      vars: 2,\n      consts: [[1, \"registro-container\"], [1, \"registro-card\"], [3, \"formGroup\", \"ngSubmit\"], [\"appearance\", \"outline\"], [\"matInput\", \"\", \"formControlName\", \"nome\", \"required\", \"\"], [\"matInput\", \"\", \"formControlName\", \"email\", \"type\", \"email\", \"required\", \"\"], [\"matInput\", \"\", \"formControlName\", \"senha\", \"type\", \"password\", \"required\", \"\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\"], [\"mat-button\", \"\", \"routerLink\", \"/login\"]],\n      template: function RegistroComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-card\", 1)(2, \"mat-card-header\")(3, \"mat-card-title\");\n          i0.ɵɵtext(4, \"Crie sua conta\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(5, \"mat-card-content\")(6, \"form\", 2);\n          i0.ɵɵlistener(\"ngSubmit\", function RegistroComponent_Template_form_ngSubmit_6_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(7, \"mat-form-field\", 3)(8, \"mat-label\");\n          i0.ɵɵtext(9, \"Nome\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(10, \"input\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"mat-form-field\", 3)(12, \"mat-label\");\n          i0.ɵɵtext(13, \"Email\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(14, \"input\", 5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"mat-form-field\", 3)(16, \"mat-label\");\n          i0.ɵɵtext(17, \"Senha\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(18, \"input\", 6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"button\", 7);\n          i0.ɵɵtext(20, \" Registrar \");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(21, \"mat-card-actions\")(22, \"a\", 8);\n          i0.ɵɵtext(23, \"J\\u00E1 tem conta? Fa\\u00E7a login\");\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"formGroup\", ctx.registroForm);\n          i0.ɵɵadvance(13);\n          i0.ɵɵproperty(\"disabled\", ctx.registroForm.invalid);\n        }\n      },\n      dependencies: [i3.RouterLink, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName, i4.MatCard, i4.MatCardActions, i4.MatCardContent, i4.MatCardHeader, i4.MatCardTitle, i5.MatAnchor, i5.MatButton, i6.MatInput, i7.MatFormField, i7.MatLabel],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","RegistroComponent","constructor","fb","authService","router","registroForm","group","nome","required","email","senha","minLength","onSubmit","valid","registrar","value","subscribe","next","alert","navigate","error","console","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","AuthService","i3","Router","selectors","decls","vars","consts","template","RegistroComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","RegistroComponent_Template_form_ngSubmit_6_listener","ɵɵelement","ɵɵadvance","ɵɵproperty","invalid"],"sources":["D:\\Users\\pedro.pereira\\Downloads\\Meu-Lembrete\\Meu-Lembrete\\src\\app\\pages\\registro\\registro.component.ts","D:\\Users\\pedro.pereira\\Downloads\\Meu-Lembrete\\Meu-Lembrete\\src\\app\\pages\\registro\\registro.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-registro',\r\n  templateUrl: './registro.component.html',\r\n  styleUrls: ['./registro.component.scss']\r\n})\r\nexport class RegistroComponent {\r\n  registroForm: FormGroup;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {\r\n    this.registroForm = this.fb.group({\r\n      nome: ['', Validators.required],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      senha: ['', [Validators.required, Validators.minLength(6)]]\r\n    });\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.registroForm.valid) {\r\n      this.authService.registrar(this.registroForm.value).subscribe({\r\n        next: () => {\r\n          alert('Registro realizado com sucesso!');\r\n          this.router.navigate(['/login']);\r\n        },\r\n        error: (error) => {\r\n          console.error('Erro no registro:', error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n}","<div class=\"registro-container\">\r\n  <mat-card class=\"registro-card\">\r\n    <mat-card-header>\r\n      <mat-card-title>Crie sua conta</mat-card-title>\r\n    </mat-card-header>\r\n\r\n    <mat-card-content>\r\n      <form [formGroup]=\"registroForm\" (ngSubmit)=\"onSubmit()\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Nome</mat-label>\r\n          <input matInput formControlName=\"nome\" required>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Email</mat-label>\r\n          <input matInput formControlName=\"email\" type=\"email\" required>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Senha</mat-label>\r\n          <input matInput formControlName=\"senha\" type=\"password\" required>\r\n        </mat-form-field>\r\n\r\n        <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"registroForm.invalid\">\r\n          Registrar\r\n        </button>\r\n      </form>\r\n    </mat-card-content>\r\n\r\n    <mat-card-actions>\r\n      <a mat-button routerLink=\"/login\">Já tem conta? Faça login</a>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n</div>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}